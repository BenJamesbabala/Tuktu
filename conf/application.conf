# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
# If you deploy your application to several instances be sure to use the same key!
application.secret="Bmem`uHC/>EryfPfryrLW@l4q:LOSI@xIWE>9w_eS4W^em>3;in6JQj4<N^?4udZ"

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# application.router=my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.user=sa
# db.default.password=""

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG


tuktu {
    metarepo = "modules/modeller/meta"
    configrepo = "configs"
    webrepo = "configs/analytics"
    jsurl = "http://localhost:9000/Tuktu.js"
    timeout = 30
    dispatchers = 5
    cluster = {
        nodes = [
			{
                host = "127.0.0.1"
                port = "2552"
                uiport = "9000"
            }
        ]
    }
    monitor = {
        level = "none"
        max_health_fails = 3
        health_interval = 30
        finish_expiration = 30
        error_expiration = 40320
    }
    dfs = {
		blocksize = 64
        prefix = "dfs"
		precachecount = 3
		nft_file = "nft.data"
    }
    db = {
        replication = 2
        data = "db/data"
        journal = "db/journal"
		daemons = 10
    }
}

# Akka remoting
bounded-mailbox {
	mailbox-type = "akka.dispatch.BoundedMailbox"
	mailbox-capacity = 10000
	mailbox-push-timeout-time = 10s
}
	
akka {
    loggers = ["akka.event.slf4j.Slf4jLogger"]
    loglevel = "DEBUG"
    actor {
        provider = "akka.remote.RemoteActorRefProvider"
		mailbox {
			requirements {
				"akka.dispatch.BoundedMessageQueueSemantics" = bounded-mailbox
			}
		}
    }
    remote {
        enabled-transports = ["akka.remote.netty.tcp"]
        netty.tcp {
            hostname = "127.0.0.1"
            port = 2552
			
			#bind-hostname = "127.0.0.1"
			#bind-port = 2552
        }
    }
}